name: 2a4ed47d5c4afa24a3be956bd7bfd9fa
services:
  permissions:
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
    cap_drop:
      - ALL
    configs:
      - source: permissions_actions_data
        target: /script/actions.json
        mode: 320
      - source: permissions_run_script
        target: /script/run.py
        mode: 448
    deploy:
      resources:
        limits:
          cpus: 2
          memory: "1073741824"
    entrypoint:
      - python3
      - /script/run.py
    environment:
      GID: "568"
      GROUP_ID: "568"
      NVIDIA_VISIBLE_DEVICES: void
      PGID: "568"
      PUID: "568"
      TZ: Etc/UTC
      UID: "568"
      UMASK: "002"
      UMASK_SET: "002"
      USER_ID: "568"
    group_add:
      - "568"
    healthcheck:
      disable: true
    image: python:3.13.0-slim-bookworm
    network_mode: none
    platform: linux/amd64
    restart: on-failure:1
    security_opt:
      - no-new-privileges
    user: "0:0"
    volumes:
      - type: bind
        source: /opt/tests/mnt/config
        target: /mnt/permission/config
        bind:
          propagation: rprivate
          create_host_path: true
      - type: bind
        source: /opt/tests/mnt/video
        target: /mnt/permission/video
        bind:
          propagation: rprivate
          create_host_path: true
  plex-auto-languages:
    cap_drop:
      - ALL
    depends_on:
      permissions:
        condition: service_completed_successfully
        required: true
    deploy:
      resources:
        limits:
          cpus: 2
          memory: "4294967296"
    environment:
      CONTAINERIZED: "true"
      GID: "568"
      GROUP_ID: "568"
      NVIDIA_VISIBLE_DEVICES: void
      PGID: "568"
      PLEX_TOKEN: token
      PLEX_URL: http://192.168.1.100:32400
      PUID: "568"
      TZ: Etc/UTC
      UID: "568"
      UMASK: "002"
      UMASK_SET: "002"
      USER_ID: "568"
    group_add:
      - "568"
    healthcheck:
      disable: true
    image: remirigal/plex-auto-languages:v1.2.3
    networks:
      default: null
    platform: linux/amd64
    restart: unless-stopped
    security_opt:
      - no-new-privileges
    user: 568:568
    volumes:
      - type: bind
        source: /opt/tests/mnt/config
        target: /config
        bind:
          propagation: rprivate
          create_host_path: true
      - type: bind
        source: /opt/tests/mnt/video
        target: /video
        bind:
          propagation: rprivate
          create_host_path: true
networks:
  default:
    name: 2a4ed47d5c4afa24a3be956bd7bfd9fa_default
configs:
  permissions_actions_data:
    name: 2a4ed47d5c4afa24a3be956bd7bfd9fa_permissions_actions_data
    content: '[{"mount_path": "/mnt/permission/config", "is_temporary": false, "identifier": "config", "recursive": false, "mode": "check", "uid": 568, "gid": 568, "chmod": null}, {"mount_path": "/mnt/permission/video", "is_temporary": false, "identifier": "video", "recursive": false, "mode": "check", "uid": 568, "gid": 568, "chmod": null}]'
  permissions_run_script:
    name: 2a4ed47d5c4afa24a3be956bd7bfd9fa_permissions_run_script
    content: |
      #!/usr/bin/env python3

      import os
      import json
      import time
      import shutil

      with open("/script/actions.json", "r") as f:
          actions_data = json.load(f)

      if not actions_data:
          # If this script is called, there should be actions data
          raise ValueError("No actions data found")

      def fix_perms(path, chmod, recursive=False):
          print(f"Changing permissions{' recursively ' if recursive else ' '}to {chmod} on: [{path}]")
          os.chmod(path, int(chmod, 8))
          if recursive:
              for root, dirs, files in os.walk(path):
                  for f in files:
                      os.chmod(os.path.join(root, f), int(chmod, 8))
          print("Permissions after changes:")
          print_chmod_stat()

      def fix_owner(path, uid, gid, recursive=False):
          print(f"Changing ownership{' recursively ' if recursive else ' '}to {uid}:{gid} on: [{path}]")
          os.chown(path, uid, gid)
          if recursive:
              for root, dirs, files in os.walk(path):
                  for f in files:
                      os.chown(os.path.join(root, f), uid, gid)
          print("Ownership after changes:")
          print_chown_stat()

      def print_chown_stat():
          curr_stat = os.stat(action["mount_path"])
          print(f"Ownership: [{curr_stat.st_uid}:{curr_stat.st_gid}]")

      def print_chmod_stat():
          curr_stat = os.stat(action["mount_path"])
          print(f"Permissions: [{oct(curr_stat.st_mode)[3:]}]")

      def print_chown_diff(curr_stat, uid, gid):
          print(f"Ownership: wanted [{uid}:{gid}], got [{curr_stat.st_uid}:{curr_stat.st_gid}].")

      def print_chmod_diff(curr_stat, mode):
          print(f"Permissions: wanted [{mode}], got [{oct(curr_stat.st_mode)[3:]}].")

      def perform_action(action):
          start_time = time.time()
          print(f"=== Applying configuration on volume with identifier [{action['identifier']}] ===")

          if not os.path.isdir(action["mount_path"]):
              print(f"Path [{action['mount_path']}] is not a directory, skipping...")
              return

          if action["is_temporary"]:
              print(f"Path [{action['mount_path']}] is a temporary directory, ensuring it is empty...")
              for item in os.listdir(action["mount_path"]):
                  item_path = os.path.join(action["mount_path"], item)

                  # Exclude the safe directory, where we can use to mount files temporarily
                  if os.path.basename(item_path) == "ix-safe":
                      continue
                  if os.path.isdir(item_path):
                      shutil.rmtree(item_path)
                  else:
                      os.remove(item_path)

          if not action["is_temporary"] and os.listdir(action["mount_path"]):
              print(f"Path [{action['mount_path']}] is not empty, skipping...")
              return

          print(f"Current Ownership and Permissions on [{action['mount_path']}]:")
          curr_stat = os.stat(action["mount_path"])
          print_chown_diff(curr_stat, action["uid"], action["gid"])
          print_chmod_diff(curr_stat, action["chmod"])
          print("---")

          if action["mode"] == "always":
              fix_owner(action["mount_path"], action["uid"], action["gid"], action["recursive"])
              if not action["chmod"]:
                  print("Skipping permissions check, chmod is falsy")
              else:
                  fix_perms(action["mount_path"], action["chmod"], action["recursive"])
              return

          elif action["mode"] == "check":
              if curr_stat.st_uid != action["uid"] or curr_stat.st_gid != action["gid"]:
                  print("Ownership is incorrect. Fixing...")
                  fix_owner(action["mount_path"], action["uid"], action["gid"], action["recursive"])
              else:
                  print("Ownership is correct. Skipping...")

              if not action["chmod"]:
                  print("Skipping permissions check, chmod is falsy")
              else:
                  if oct(curr_stat.st_mode)[3:] != action["chmod"]:
                      print("Permissions are incorrect. Fixing...")
                      fix_perms(action["mount_path"], action["chmod"], action["recursive"])
                  else:
                      print("Permissions are correct. Skipping...")

          print(f"Time taken: {(time.time() - start_time) * 1000:.2f}ms")
          print(f"=== Finished applying configuration on volume with identifier [{action['identifier']}] ==")
          print()

      if __name__ == "__main__":
          start_time = time.time()
          for action in actions_data:
              perform_action(action)
          print(f"Total time taken: {(time.time() - start_time) * 1000:.2f}ms")
x-notes: |
  # Welcome to TrueNAS SCALE

  Thank you for installing <app_name>!

  ## Documentation

  Documentation for <app_name> can be found at https://www.truenas.com/docs.

  ## Bug reports

  If you find a bug in this app, please file an issue at
  https://ixsystems.atlassian.net or https://github.com/truenas/apps

  ## Feature requests or improvements

  If you find a feature request for this app, please file an issue at
  https://ixsystems.atlassian.net or https://github.com/truenas/apps
x-portals: []

